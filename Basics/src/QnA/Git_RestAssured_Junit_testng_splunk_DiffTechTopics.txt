Git Commands
------------

1. git clone <repositorypath>  -- Clone the repository code to loacal
2. git checkout -b <"branchName"> - create branch
3. git pull - to pull latest code from repository
4. git checkout <branchName> - change branch
5. git status - display status non commited files shows in red font
6. git add .  - display non committed files in green
7. git commit -m 'storyno:comments' - commit the code changes into branch
8. git push origin <branchName> - Push the code changes into repository

Rest Assured
-------------
rest assured build on top of httpclient framework

1. <ProjectName> - > classes > features > src - main ^java>stepDef > util ^resources >data  > pom.xml

    Jsonobject request = {  "userProfileDetails" : {    "gender":"M"   }}   - json format
    String ApiUrI = "/account-xapi/api/userprofile/user/" + userId;
    String updateProfileType ="ALL"; - parameter
    
2.         Response resp = RestAssured.given().header("content-Type", "application/json")
                .header("X-Macys-SecurityToken", securedToken)
                .body(request.toString())
                .when()
                .queryParam("updateProfileType", updateProfileType)
                .put(ApiUrI).then().statusCode(200).extract().response();
                
3.   Map<String, Object> json = resp.jsonPath().get();
	 Map<String, Object> response = (Map<String, Object>) json.get("userProfileResponse");                
                
3. RestAssured.given()
			  .header('content-Type','application/json')
			  .body(request)
			  .when()
			  .queryparam('key','value')
			  .put(url).
			  .then()
			  .statusCode(200)
			  .extract()
			  .response();              			  
			  
 Example : Authentication
 1.  basic authentication. - preemptive(sent credentials in header format)  - challenge(when server ask then only it pass the creadentials)
 child class
 int code = RestAssured.given()
            .auth().preemptive()               // we can remove these 2 lines if we extents below base class 
	    .basic("UserName","Password")     // 1. .auth.preemptive().base("un ","pw ")
	    .when()                            // 2. .auth.basic(" un ","pw")
	    .get("http://uri")
	    .getStatusCode();
 
 baseclass:
 RestAssured.authentication = RestAssured.preemptive().basic("username","pwd");
 RestAssured.baseURI = "uri";
 
 2.  Authorization (Oauth)  (oauth(),oauth2())
 oauth - restassured, scribejava dependency required
   
 public class OauthExample {

	@Test
	public void Oauth() {

		Response resp = (Response) RestAssured.given().auth().oauth(" ", " ", " ", " ").post();
		Response resp = (Response) RestAssured.given().auth().oauth2(" ").post();
		System.out.println(resp.getStatusCode());
		System.out.println(resp.getBody().jsonPath().prettify());
	}
}
 
 // to get the token 	for oauth2()	
 
 Response resp = (Response) RestAssured.given().formParam("client_id "," ")
                 .formparam("client_secret","")
		 .post("url");
String st = resp.jsonPath().get("access_token"));
// step 2
		Response resp = (Response) RestAssured.given().auth().oauth2(token).post();

// Jsessionid is a cookie in j2ee web application which is used in session tracking
Response resp = (Response) RestAssured.given().auth().oauth2(" ").post();
		System.out.println(resp.getStatusCode());
		System.out.println(resp.getBody().jsonPath().prettify());
    String sessionID = resp.getCookies().get("JSESSIONID");
 
Key and tokens
1. Consumer API keys 
api key - xxxxxxxxxxxxxxx
api secreate key -yyyyyyuyyyyyyyyyy
 
 2. Access token and access token secret
 - access token
 - access token secret
 
 *** Authorization Services****
 1. Authorization code flow  - client(user) -> photo booth app ->  google oauth server 
                                 google oauth server -> user permission
				 photo booth app - access to google content server
2. Implict flow - - client(user) -> photo booth app ->  google oauth server 
                                 google oauth server -> user permission
				 google oauth server share token to - photo booth app 
				 photo booth app - access to google content server by using token
3. Client Credential flow   - when the client is well trusted (confidential client ) 
                            - Microservices communication betweeen two services. 
                              
 
 
4. http methods 
   - get - used to request the data from a specific source
   - post - used to send the data to server add /create
   - put  - update data
   - delete - to delete the specific data
   - patch - update the specific data
   - head
   - option			              

5. GET - can be cached / remain in browser history / bookmarked / never be used dealing with sensitive data
         / length restrictions / only used request data
6. POST - never cached / not remain in the browser history / cannot be book marked / no restrictions on length data       
Selenium

7 1XX - Informational
8 2XX - Success
  200 - ok  201-created 202-accepted  204-No content
9 3XX - Redirection  
  304- NotModified
10 4XX - Client Error
  400-badrequest 401-unauthorized 403-Forbidden 404-Not found 409-conflict
11 51xx - Server Error
  500 - Internal Server error

Junit and TESTNG
-----------------
Features:
1. Annotation support,  Yes yes 
Exception test, yes yes
Ignore test, yes yes
timeout test, yes yes 
suite, yes yes
group, no (junit), yes
dependent, no(junit) yes
parameterization yes yes

Feature	Junit	TestNG
		
Test Annotation										Junit		TestNG
run before all tests in this suite have run						_		BeforeSuite
run after all tests in this suite have run						_		Aftersuite
run before the test									_		BeforeTest
run after the test									_		AfterTest
run before the first test method that belongs to any of these groups is invoked		_		BeforeGroups
run after the last test method that belongs to any of these groups is invoked		_		AfterGroups
run before the first test method in the current class invoked				BeforeClass	BeforeClass
run after the last test method in the current class have been run			AfterClass	AfterClass
run before each test method								Before		BeforeMethod
run after easch test method								After		AfterMethod
ignore Test										ignore		Test(enable=false)
expected exception		Test(Expected - ArthimeticException.class)	Test(exceptedException=ArthemeticException.class)

Splunk
------
Splunk is a tool is used to analyse the machine data.
splunk is machine data is processed to extract the data.
splunk will help the user to leverage the machine data
1. system performance
2. Failure conditions
3. Business matrix
4. Searcha and investigate
5. Data visulization - Dash board
6. storing data.

benefits

- splunk - spl - search processing language
- input data can be any form
